# 워크플로우 이름
name: iiplab application build / deployment

# 워크플로우 실행 시, 노출되는 메시지. 현재는 실행자의 이름으로 실행되었다고 설정하였다.
run-name: Run application by ${{ github.actor }}

on:
  workflow_dispatch:
  # inputs 는 workflow 실행 시, 파라미터를 받도록 한다.
  # 이 워크플로우에서 다른 github 으로부터 소스를 받아 cuda 환경에 맞게 빌드해야하므로, 아래와 같은 파라미터들이 요구된다.
  # deployUrl : git url 을 입력해야하나, {git_name}/{repository_name} 을 넣으면 된다. 예시 참조
  # deployBranch : 해당 git 에서의 배포하고자하는 branch 명을 적는다.
  # parameters : python 파일 실행 시, 넘길 파라미터 리스트를 적는다. 현재는 받도록은 했는데, 미구현. 환경변수 형태로 넘길 것이면 활용해도 좋을 듯
  # dockerTags : 이 워크플로우는 해당 dockerTag 명으로 docker hub 에 이미지를 업로드한다. 
    inputs:
      deployUrl:
        description: 'git url'
        required: true
        default: 'gachon-iiplab/docker-images'
        type: string
      deployBranch:
        description: 'git branch'
        required: true
        default: 'main'
        type: string
      parameters:
        description: 'python 파일 실행 시, 넘길 파라미터.'
        required: false
        default: ''
        type: string
      filename:
        description: '위 깃헙에서 실행시킬 파일의 이름'
        required: false
        default: 'main.py'
        type: string
      dockerTags:
        description: '빌드 / 배포할 환경의 docker tag'
        required: false
        default: 'leesaebom/iiplab:latest'
        type: string
          
jobs:
 # 파라미터들이 잘 넘어왔는지 확인하는 단순 job
  checkParameters:
    runs-on: ubuntu-latest
    steps:
    - run : echo "deployUrl ${{ github.event.inputs.deployUrl }}"
    - run : echo "deployBranch ${{ github.event.inputs.deployBranch }}"
    - run : echo "onlyDeploy ${{ github.event.inputs.filename }}"
    - run : echo "dockerTags ${{ github.event.inputs.dockerTags }}"
  # 실제 docker 를 build 한다
  dockerBuild:
    needs: checkParameters
    runs-on: iiplab
    steps:
    - run: cd ${{ github.workspace }}
    - run: echo ${{ github.repository }}
    - uses: docker/login-action@v3.1.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - uses: actions/checkout@v4.1.2
      with:
        repository: ${{ github.event.inputs.deployUrl }}
        ref: ${{ github.event.inputs.deployBranch }}
    - run: |
           docker build --platform=linux/amd64 --build-arg GIT_URL=${{ github.event.inputs.deployUrl }} --build-arg FILENAME=${{ github.event.inputs.filename }} -t ${{ github.event.inputs.dockerTags  }} .
    - run: docker push ${{ github.event.inputs.dockerTags  }}
  # 빌드가 완료되었으면 해당 태그로 docker pull 을 진행하여, 이미지를 받고, 실행시킨다.
  dockerDeploy:
    needs: dockerBuild
    runs-on: iiplab
    steps:
      - uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - run: docker pull ${{ github.event.inputs.dockerTags  }}
      # 해당 docker tags 를 실행시키는 커맨드, 다만 gpu 사용을 위해, --gpus all 이 들어갔다. 각 어플리케이션에서 사용할 수 있는 gpu 를 제한하려면 여기를 건드리면 된다.
      # 또한, 실제 host server 에 업로드 되어있는 dataset 에 접근하기 위하여, -v /home/iiplab:/home/iiplab 가 들어가있다.
      # 해당 path 하위로 docker container 는 접근이 가능하다.
      - run: docker run --rm -v /home/iiplab:/home/iiplab --ipc=host --gpus all ${{ github.event.inputs.dockerTags }} 
    
              
